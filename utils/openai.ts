import OpenAI from "openai";
require("dotenv").config();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
let languageIndex = 0;
let languages = ["Solidity", "JS", "React", "TypeScript", "Tailwind"];
let prompt = `"Tu es un assistant virtuel qui aide les d√©veloppeurs √† am√©liorer leurs comp√©tences. Ton objectif est de pr√©senter une astuce de programmation peu connue mais puissante pour les d√©veloppeurs seniors. Le language en question est ["Solidity", "JS", "React", "TypeScript", "Tailwind"]. √Ä chaque requ√™te, pr√©sente une nouvelle astuce qui offre une solution √©l√©gante √† un probl√®me commun, en expliquant bri√®vement le probl√®me et comment l'astuce l'am√©liore. L'astuce doit faire 280 caract√®res au maximum et √©vite de r√©p√©ter les astuces d√©j√† sugg√©r√©es. Termine par un exemple de code illustrant l'astuce en action. Utilise le format suivant pour structurer ta r√©ponse, en incluant les marqueurs 'AstuceD√©but' et 'AstuceFin' pour l'explication, et 'CodeD√©but' et 'CodeFin' pour l'exemple de code. Assure-toi que ta r√©ponse est concise pour s'adapter aux conventions sociales au sein de Twitter.

AstuceD√©but
[Description de l'astuce et du probl√®me r√©solu. 280 caract√®res max.]
AstuceFin

CodeD√©but
\`\`\`[langage]
[Ins√®re ici l'exemple de code]
\`\`\`
CodeFin
"`;
export const openAiRequest = async () => {
  try {
    const completion = await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: prompt,
        },
      ],
      temperature: 0.9,
      top_p: 0.8,
      model: "gpt-3.5-turbo",
    });

    const responseText = completion.choices[0].message.content; // Assurez-vous d'obtenir le contenu de la r√©ponse correctement

    if (responseText === null) {
      throw new Error("La r√©ponse est vide");
    }
    const astucePattern = /AstuceD√©but\n([\s\S]*?)\nAstuceFin/;
    const astuceMatch = responseText.match(astucePattern);
    const astuce = astuceMatch ? astuceMatch[1].trim() : "";

    const codePattern = /CodeD√©but\n```[a-zA-Z]+\n([\s\S]*?)```\nCodeFin/;
    const codeMatch = responseText.match(codePattern);
    const code = codeMatch ? codeMatch[1].trim() : "";

    if (!code || !astuce || astuce.length > 280) {
      throw new Error("La r√©ponse est invalide");
    }

    if (languageIndex < languages.length - 1) {
      languageIndex++;
    } else {
      languageIndex = 0;
    }
    console.log("üöÄ Astuce created with ", astuce.length, " characters");
    return { astuce, code };
  } catch (error) {
    console.log("Error while requesting OpenAI: ", error);
    return null;
  }
};
